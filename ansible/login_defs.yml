---
- name: Configure shadow password suite (common)
  become: yes
  replace:
    path: /etc/login.defs
    regexp: '^(# ?)?({{ item.key }}\s+)[^\s]+$'
    replace: '\g<2>{{ item.value }}'
    validate: '/bin/grep "^{{ item.key }}\s\+{{ item.value }}$" %s'
  with_dict: "{{ defs_common }}"
  vars:
    defs_common:
      LOG_OK_LOGINS: "yes"
      UMASK: "077"
      SULOG_FILE: "/var/log/sulog"
      PASS_MAX_DAYS: 365
      PASS_MIN_DAYS: 7
      PASS_WARN_AGE: 30
      FAILLOG_ENAB: "yes"
      SHA_CRYPT_MIN_ROUNDS: 500000
      ENCRYPT_METHOD: "SHA512"
      CHFN_RESTRICT: "rwh"
      DEFAULT_HOME: "no"
- name: Configure shadow password suite (Slackware specific)
  become: yes
  when: ansible_distribution == "Slackware"
  replace:
    path: /etc/login.defs
    regexp: '^(# ?)?({{ item.key }}\s+)[^\s]+$'
    replace: '\g<2>{{ item.value }}'
    validate: '/bin/grep "^{{ item.key }}\s\+{{ item.value }}$" %s'
  with_dict: "{{ defs_slackware }}"
  vars:
    defs_slackware:
      LASTLOG_ENAB: "yes"
      PASS_MIN_LEN: 8
      FAIL_DELAY: 20
      CREATE_HOME: "yes"
      SU_WHEEL_ONLY: "yes"
      PORTTIME_CHECKS_ENAB: "yes"
      NOLOGINS_FILE: "/etc/nologin"
      CHFN_AUTH: "yes"
# The login ACL following this task will actually start blocking access, so
# check that we are not locking ourselves out of the system being hardened.
- name: 'Check that some user(s) exist in "{{ allowed_group }}" group'
  shell: getent group {{ allowed_group }} | cut -d':' -f4
  register: members_of_group
  failed_when: members_of_group.stdout == ""
- name: Configure login access control table (Slackware)
  when: ansible_distribution == "Slackware"
  become: yes
  blockinfile:
    path: /etc/login.access
    block: |
      # Allow local login for root and specific group
      +:root {{ allowed_group }}:LOCAL
      # Disallow all others
      -:ALL:ALL
- name: Configure login access control table (Debian)
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
  become: yes
  blockinfile:
    path: /etc/security/access.conf
    block: |
      + : root : LOCAL
      + : daemon : cron
      - : ALL : cron
      + : ({{ allowed_group }}) : ALL
      + : Debian-gdm lightdm : LOCAL
      - : ALL : ALL
- name: Disable core dumps
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux"
  become: yes
  replace:
    path: /etc/security/limits.conf
    regexp: '^#?\*\s+soft\s+core\s+0$'
    replace: '*               hard    core            0'
    validate: '/bin/grep "^\* \{15\}hard \{4\}core \{12\}0$" %s'
- name: Create /etc/modprobe.d/
  become: yes
  file:
    path: /etc/modprobe.d
    state: directory
- name: modprobe.d
  become: yes
  copy:
    src: "{{ playbook_dir }}/../newconfs/modprobe.d/{{ item }}.conf.new"
    dest: /etc/modprobe.d/{{ item }}.conf
    owner: root
    group: root
    mode: 0600
  with_items:
    - CIS
    - bashbunny
    - firewire
    - usb-storage
- name: Limit the list of terminals from which root can log in (securetty)
  become: yes
  copy:
    src: "{{ playbook_dir }}/../newconfs/securetty.new"
    dest: /etc/securetty
- name: Create /etc/profile.d/tmout.sh
  become: yes
  copy:
    src: "{{ playbook_dir }}/../newconfs/profile.d/tmout.sh.new"
    dest: /etc/profile.d/tmout.sh
    owner: root
    group: root
    mode: '0755'
- name: Create secure default /etc/pam.d/other
  when: ansible_distribution == "Debian" or ansible_distribution == "Kali GNU/Linux" or ansible_os_family == "RedHat"
  become: yes
  copy:
    src: "{{ playbook_dir }}/../newconfs/pam.d/other.new"
    dest: /etc/pam.d/other
    owner: root
    group: root
    mode: '0644'
- name: Disallow blank passwords
  become: yes
  replace:
    path: /etc/pam.d/common-auth
    regexp: '\s+nullok(_secure)?'
    replace: ''
- name: Enable pam_wheel.so in /etc/pam.d/su
  become: yes
  replace:
    path: /etc/pam.d/su
    regexp: '^#\s*(auth\s+required\s+pam_wheel\.so(\s+use_uid)?)$'
    replace: '\1'
    validate: '/bin/grep "^auth\s\+required\s\+pam_wheel\.so.*$" %s'
- name: Enable polyinstantiated temp directories
  become: yes
  replace:
    path: /etc/security/namespace.conf
    regexp: '^#({{ item }}\s+({{ item }})?/tmp-inst/\s+level\s+root,adm)$'
    replace: '\1'
    validate: '/bin/grep "^{{ item }}\s\+\({{ item }}\)\?/tmp-inst/\s\+level\s\+root,adm$" %s'
  with_items:
    - '/tmp'
    - '/var/tmp'
- name: Copying new pam-configs
  become: yes
  copy:
    src: "{{ playbook_dir }}/../newconfs/pam-configs/{{ item }}.new"
    dest: /usr/share/pam-configs/{{ item }}
  with_items:
    - access
    - faildelay
    - lastlog
    - polyinstation
    - pwhistory
    - tally2
    - uid_ge_1000
    - umask
- name: Update PAM
  become: yes
  command: /usr/sbin/pam-auth-update --package
